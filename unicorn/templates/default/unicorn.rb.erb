##
# Unicorn config at <%= @node[:unicorn][:config] %>
# Managed by Chef - Local Changes will be Nuked from Orbit (just to be sure)
# Based on http://unicorn.bogomips.org/examples/unicorn.conf.rb
##

# Use at least one worker per core if you're on a dedicated server,
# more will usually help for _short_ waits on databases/caches.
worker_processes <%= @node[:unicorn][:worker_processes] %>

# Help ensure your application will always spawn in the symlinked
# "current" directory that Capistrano sets up.
working_directory '<%= @node[:unicorn][:working_directory] %>' # available in 0.94.0+

# What the timeout for killing busy workers is, in seconds
timeout <%= @node[:unicorn][:worker_timeout] %>


# listen on a Unix domain socket
# a shorter backlog for quicker failover when busy
# if you are load balancing
# listen "/tmp/.sock", :backlog => 64 
# listen on a TCP port
# listen 8080, :tcp_nopush => true

# What ports/sockets to listen on, and what options for them.
<%- if @node[:unicorn][:listen][:type] == 'tcp' %>
listen <%= @node[:unicorn][:listen][:address] %>, :tcp_nopush => <%= @node[:unicorn][:listen][:tcp_nopush] %>
<%- elsif @node[:unicorn][:listen][:type] == 'socket' %>
listen '<%= @node[:unicorn][:listen][:address] %>', :backlog => <%= @node[:unicorn][:listen][:backlog] %>
<%- end %>


# feel free to point this anywhere accessible on the filesystem
pid '<%= @node[:unicorn][:pid] %>'

# By default, the Unicorn logger will write to stderr.
# Additionally, ome applications/frameworks log to stderr or stdout,
# so prevent them from going to /dev/null when daemonized here:
stderr_path '<%= @node[:unicorn][:stderr_log] %>'
stdout_path '<%= @node[:unicorn][:stdout_log] %>'

# Whether the app should be pre-loaded
# If you're doing this make sure your forked db connections
# are not shared
preload_app <%= @node[:unicorn][:preload_app] %>

# http://www.rubyenterpriseedition.com/faq.html#adapt_apps_for_cow
if GC.respond_to?(:copy_on_write_friendly=)
  GC.copy_on_write_friendly = <%= @node[:unicorn][:copy_on_write_friendly] %>
end

<%- if @node[:unicorn][:before_fork] %>
# What to do before we fork a worker
before_fork do |server, worker|
  # the following is highly recomended for Rails + "preload_app true"
  # as there's no need for the master process to hold a connection
  defined?(ActiveRecord::Base) and
    ActiveRecord::Base.connection.disconnect!

  ##
  # When sent a USR2, Unicorn will suffix its pidfile with .oldbin and
  # immediately start loading up a new version of itself (loaded with a new
  # version of our app). When this new Unicorn is completely loaded
  # it will begin spawning workers. The first worker spawned will check to
  # see if an .oldbin pidfile exists. If so, this means we've just booted up
  # a new Unicorn and need to tell the old one that it can now die. To do so
  # we send it a QUIT.
  #
  # Using this method we get 0 downtime deploys.

  old_pid = '<%= @node[:unicorn][:pid] %>' + '.oldbin'
  if File.exists?(old_pid) && server.pid != old_pid
    begin
      Process.kill("QUIT", File.read(old_pid).to_i)
    rescue Errno::ENOENT, Errno::ESRCH
      # someone else did our job for us
    end
  end
end
<%- end %>

<%- if @node[:unicorn][:after_fork] %>
after_fork do |server, worker|
  ##
  # Unicorn master loads the app then forks off workers - because of the way
  # Unix forking works, we need to make sure we aren't using any of the parent's
  # sockets, e.g. db connection
  # the following is *required* for Rails + "preload_app true"
  defined?(ActiveRecord::Base) and ActiveRecord::Base.establish_connection
  
  # Redis and Memcached would go here but their connections are established
  # on demand, so the master never opens a socket
    
  ##
  # Unicorn master is started as root, which is fine, but let's
  # drop the workers to <%= @node[:app][:app_name] %>:<%= @node[:app][:app_name] %>
  
  begin
    uid, gid = Process.euid, Process.egid
    user, group = '<%= @node[:app][:app_name] %>', '<%= @node[:app][:app_name] %>'
    target_uid = Etc.getpwnam(user).uid
    target_gid = Etc.getgrnam(group).gid
    worker.tmp.chown(target_uid, target_gid)
    if uid != target_uid || gid != target_gid
      Process.initgroups(user, target_gid)
      Process::GID.change_privilege(target_gid)
      Process::UID.change_privilege(target_uid)
    end
  rescue => e
    if RAILS_ENV == 'development'
      STDERR.puts "couldn't change user, oh well"
    else
      raise e
    end
  end
end

<%- end %>
