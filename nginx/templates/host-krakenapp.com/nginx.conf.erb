# user <%= @node[:nginx][:user] %>;
worker_processes  <%= @node[:nginx][:worker_processes] %>;

<% if @node[:nginx][:daemon_disable] -%>
daemon off;
<% end -%>

error_log  <%= @node[:nginx][:log_dir] %>/error.log;
pid        /var/run/nginx.pid;

events {
  worker_connections  <%= @node[:nginx][:worker_connections] %>;
  # more efficient on linux
  use epoll;
}

http {
  include       <%= @node[:nginx][:dir] %>/mime.types;
  default_type  application/octet-stream;

  access_log	<%= @node[:nginx][:log_dir] %>/access.log;

  sendfile on;
  tcp_nopush on;
  tcp_nodelay on;

  <% if @node[:nginx][:keepalive] == "on" %>
  keepalive_timeout  <%= @node[:nginx][:keepalive_timeout] %>;
  <% end %>

  gzip  <%= @node[:nginx][:gzip] %>;
  <% if @node[:nginx][:gzip] == "on" %>
  gzip_http_version <%= @node[:nginx][:gzip_http_version] %>;
  gzip_comp_level <%= @node[:nginx][:gzip_comp_level] %>;
  gzip_proxied <%= @node[:nginx][:gzip_proxied] %>;
  gzip_buffers <%= @node[:nginx][:gzip_buffers] %>;
  gzip_min_length <%= @node[:nginx][:gzip_min_length] %>;
  gzip_types <%= @node[:nginx][:gzip_types].join(' ') %>;
  gzip_disable  msie6;
  <% end %>

  server_names_hash_bucket_size <%= @node[:nginx][:server_names_hash_bucket_size] %>;
  
  <% if @node[:nginx][:varnish_proxy] %>
  upstream varnish {
    server <%= @node[:nginx][:varnish_proxy_host] %>:<%= @node[:varnish][:listen_port] %> weight=<%= @node[:nginx][:varnish_weight] %> max_fails=<%= @node[:nginx][:varnish_max_fails] %> fail_timeout=<%= @node[:nginx][:varnish_fail_timeout] %>;
  }
  <% end %>
  
  <%- if @node[:nginx][:unicorn_socket] %>
  # unicorn master opens a unix domain socket
  upstream app_server {
    server unix:/tmp/sockets/<%= @node[:app][:app_name] %>_unicorn.sock;
  }
  <%- end %>
  
  server {
    listen <%= @node[:nginx][:listen_port] %>;
    server_name www.<%= @node[:nginx][:host_name] %> <%= @node[:nginx][:host_name] %>;
    
    # rewrite non-www to www
    # if ( $host = '<%= @node[:nginx][:host_name] %>' ) {
    #   rewrite ^(.*)$ http://www.<%= @node[:nginx][:host_name] %>$1; # $1 contains '/foo', not 'mydomain.com/foo'
    # }
    
    access_log /var/log/nginx/<%= @node[:nginx][:host_name] %>/access.log;
    error_log /var/log/nginx/<%= @node[:nginx][:host_name] %>/error.log;

    <% if @node[:nginx][:ssl_enabled] %>
    # rewrite admin calls to https
    location /admin {
      rewrite  ^/(admin($|/.*))  https://<%= @node[:nginx][:host_name] %>/$1  permanent;
    }
    <% end %>
    
    location /nginx {
      root <%= @node[:nginx][:doc_root] %>;
    }
    
    <% if @node[:nginx][:varnish_proxy] %>
    location ~* ^/sitemap {
       expires 0s;
       
       proxy_pass             http://varnish;
       proxy_redirect         http://varnish/ http://$host:$server_port/;
       proxy_set_header       Host $host;
       proxy_set_header       X-Real-IP $remote_addr;
       proxy_set_header       X-Forwarded-For $proxy_add_x_forwarded_for;
       proxy_set_header       X-Client-Verify SUCCESS;
       proxy_set_header       X-SSL-Subject $ssl_client_s_dn;
       proxy_set_header       X-SSL-Issuer  $ssl_client_i_dn;
       proxy_intercept_errors on;
    }
    
    location ~* ^(/images|/javascripts|/stylesheets) {
       expires 1y;
       
       proxy_pass             http://varnish;
       proxy_redirect         http://varnish/ http://$host:$server_port/;
       proxy_set_header       Host $host;
       proxy_set_header       X-Real-IP $remote_addr;
       proxy_set_header       X-Forwarded-For $proxy_add_x_forwarded_for;
       proxy_set_header       X-Client-Verify SUCCESS;
       proxy_set_header       X-SSL-Subject $ssl_client_s_dn;
       proxy_set_header       X-SSL-Issuer  $ssl_client_i_dn;
       proxy_intercept_errors on;
    }
    <% end %>
    
    location / {
      root <%= @node[:nginx][:doc_root] %>;
      client_max_body_size <%= @node[:nginx][:client_max_body_size] %>;
      
      <%- if @node[:nginx][:unicorn_socket] -%>
        # set cache control
        expires 5m;

        proxy_pass             http://app_server;
        proxy_set_header       Host $host;
        proxy_set_header       X-Real-IP $remote_addr;
        proxy_set_header       X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header       X-Client-Verify SUCCESS;
        proxy_set_header       X-SSL-Subject $ssl_client_s_dn;
        proxy_set_header       X-SSL-Issuer  $ssl_client_i_dn;
        proxy_intercept_errors on;
      <%- end -%>
      
      
      <% if @node[:nginx][:varnish_proxy] %>
      # auth_basic            "Restricted";
      # auth_basic_user_file  auth/htpasswd;

      # set cache control
      expires 5m;

      proxy_pass             http://varnish;
      proxy_redirect         http://varnish/ http://$host:$server_port/;
      proxy_set_header       Host $host;
      proxy_set_header       X-Real-IP $remote_addr;
      proxy_set_header       X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header       X-Client-Verify SUCCESS;
      proxy_set_header       X-SSL-Subject $ssl_client_s_dn;
      proxy_set_header       X-SSL-Issuer  $ssl_client_i_dn;
      proxy_intercept_errors on;
      <% elsif @node[:chef][:roles].include?('static') %>
      
      # set cache control
      expires 1y;
      
      # mark these as public so they get cached on SSL connections in FF
      # see http://blog.pluron.com/2008/07/why-you-should.html
      add_header Cache-Control public;
      
      # doc root
      root <%= @node[:nginx][:doc_root] %>;
      
      # If the file exists as a static file serve it directly without
      # running all the other rewrite tests on it
      if (-f $request_filename) { 
        break; 
      }
      <% end %>      
    }
    
    <% if @node[:chef][:roles].include?('proxy') %>
      error_page 502 503 /502_503_proxy.html;  
      location = /502_503_proxy.html {  
          root  <%= @node[:nginx][:doc_root] %>;  
      }
    <% end %>
    
    
    <% if @node[:chef][:roles].include?('static') %>
      error_page 500  /500_static.html;  
      location = /500_static.html {  
          root  <%= @node[:nginx][:doc_root] %>;  
      }
      error_page 404  /404_static.html;  
      location = /404_static.html {  
          root  <%= @node[:nginx][:doc_root] %>;  
      }
    <% end %>
  }
  
  <% if @node[:nginx][:ssl_enabled] %>
  server {
    listen   443;
    ssl on;
    ssl_certificate /etc/ssl/certs/<%= @node[:nginx][:ssl_cert_name] %>;
    ssl_certificate_key /etc/ssl/private/<%= @node[:nginx][:ssl_cert_key_name] %>;
    
    ssl_protocols SSLv3 TLSv1;
    ssl_ciphers HIGH:MEDIUM:+TLSv1:!SSLv2:+SSLv3:!ADH:!aNULL:!eNULL:!NULL:!LOW:!EXP:RC4+RSA;
    
    server_name www.<%= @node[:nginx][:host_name] %> <%= @node[:nginx][:host_name] %>;
    
    # redirect www to non-www
    if ($host ~* www\.(.*)) {
      set $host_without_www $1;
      rewrite ^(.*)$ https://$host_without_www$1 permanent; # $1 contains '/foo', not 'www.mydomain.com/foo'
    }
    
    access_log /var/log/nginx/<%= @node[:nginx][:host_name] %>/ssl-access.log;
    error_log /var/log/nginx/<%= @node[:nginx][:host_name] %>/ssl-error.log;
    
    <%- if @node[:nginx][:varnish_proxy] -%>
    location / {
      proxy_pass             http://varnish;
      proxy_redirect         http://varnish/ http://$host:$server_port/;
      proxy_set_header       Host $host;
      proxy_set_header       X-Real-IP $remote_addr;
      proxy_set_header       X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header       X-Client-Verify SUCCESS;
      proxy_set_header       X-SSL-Subject $ssl_client_s_dn;
      proxy_set_header       X-SSL-Issuer  $ssl_client_i_dn;
    }
    <%- end -%>
  }
  <% end %>
  
  include <%= @node[:nginx][:dir] %>/conf.d/*.conf;
  include <%= @node[:nginx][:dir] %>/sites-enabled/*;
}
